<?php

namespace Proxies\__CG__\CMS\AdminBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Article extends \CMS\AdminBundle\Entity\Article implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'title', 'description', 'sortDescription', 'url', 'image', 'dateCreate', 'dateStart', 'idGroupArticle', 'views', 'isActive', 'isSpecial', 'groupArticle', 'tags', 'specialGroupArticle', 'file', 'temp');
        }

        return array('__isInitialized__', 'id', 'title', 'description', 'sortDescription', 'url', 'image', 'dateCreate', 'dateStart', 'idGroupArticle', 'views', 'isActive', 'isSpecial', 'groupArticle', 'tags', 'specialGroupArticle', 'file', 'temp');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Article $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', array());

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setSortDescription($sortDescription)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSortDescription', array($sortDescription));

        return parent::setSortDescription($sortDescription);
    }

    /**
     * {@inheritDoc}
     */
    public function getSortDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSortDescription', array());

        return parent::getSortDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', array($url));

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', array());

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', array($image));

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', array());

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreate($dateCreate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreate', array($dateCreate));

        return parent::setDateCreate($dateCreate);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateCreate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateCreate', array());

        return parent::getDateCreate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateStart($dateStart)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateStart', array($dateStart));

        return parent::setDateStart($dateStart);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateStart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateStart', array());

        return parent::getDateStart();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdGroupArticle($idGroupArticle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdGroupArticle', array($idGroupArticle));

        return parent::setIdGroupArticle($idGroupArticle);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdGroupArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdGroupArticle', array());

        return parent::getIdGroupArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setViews($views)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViews', array($views));

        return parent::setViews($views);
    }

    /**
     * {@inheritDoc}
     */
    public function getViews()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViews', array());

        return parent::getViews();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', array($isActive));

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', array());

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsSpecial($isSpecial)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsSpecial', array($isSpecial));

        return parent::setIsSpecial($isSpecial);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsSpecial()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsSpecial', array());

        return parent::getIsSpecial();
    }

    /**
     * {@inheritDoc}
     */
    public function setGroupArticle(\CMS\AdminBundle\Entity\GroupArticle $groupArticle = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroupArticle', array($groupArticle));

        return parent::setGroupArticle($groupArticle);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupArticle', array());

        return parent::getGroupArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateCreatedValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateCreatedValue', array());

        return parent::setDateCreatedValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setViewValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViewValue', array());

        return parent::setViewValue();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbsolutePath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbsolutePath', array());

        return parent::getAbsolutePath();
    }

    /**
     * {@inheritDoc}
     */
    public function getAbsoluteThumbPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbsoluteThumbPath', array());

        return parent::getAbsoluteThumbPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getWebPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebPath', array());

        return parent::getWebPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setFile(\Symfony\Component\HttpFoundation\File\UploadedFile $file = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFile', array($file));

        return parent::setFile($file);
    }

    /**
     * {@inheritDoc}
     */
    public function getFile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFile', array());

        return parent::getFile();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpload', array());

        return parent::preUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function upload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'upload', array());

        return parent::upload();
    }

    /**
     * {@inheritDoc}
     */
    public function removeUpload()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUpload', array());

        return parent::removeUpload();
    }

    /**
     * {@inheritDoc}
     */
    public function addTag(\CMS\AdminBundle\Entity\Tag $tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTag', array($tags));

        return parent::addTag($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTag(\CMS\AdminBundle\Entity\Tag $tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTag', array($tags));

        return parent::removeTag($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', array());

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function addSpecialGroupArticle(\CMS\AdminBundle\Entity\SpecialGroupArticle $specialGroupArticle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSpecialGroupArticle', array($specialGroupArticle));

        return parent::addSpecialGroupArticle($specialGroupArticle);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSpecialGroupArticle(\CMS\AdminBundle\Entity\SpecialGroupArticle $specialGroupArticle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSpecialGroupArticle', array($specialGroupArticle));

        return parent::removeSpecialGroupArticle($specialGroupArticle);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpecialGroupArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpecialGroupArticle', array());

        return parent::getSpecialGroupArticle();
    }

}
